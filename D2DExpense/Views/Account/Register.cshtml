@model D2DExpense.Models.RegisterModel
@{
    ViewBag.Title = "Create an Account";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">

    <style>
        body {
            background-color: #f4f7fc;
            font-family: 'Arial', sans-serif;
        }

        .register-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .register-card {
            width: 100%;
            max-width: 420px;
            padding: 30px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        }

            .register-card h2 {
                font-size: 24px;
                font-weight: bold;
                color: #2196F3; /* Primary Color */
            }

            .register-card .form-label {
                font-weight: 600;
                font-size: 14px;
            }

            .register-card .btn-google {
                background-color: #db4437;
                color: white;
                font-weight: bold;
                transition: 0.3s;
            }

                .register-card .btn-google:hover {
                    background-color: #c1351d;
                }

            .register-card .btn-primary {
                font-weight: bold;
                background-color: #2196F3; /* Primary Color */
                border: none;
                transition: 0.3s;
            }

                .register-card .btn-primary:hover {
                    background-color: #1976D2; /* Slightly darker primary color */
                }

        .alert {
            border-radius: 6px;
            font-weight: 500;
        }

        .alert-success {
            background-color: #D0E7F9; /* Secondary Color */
            color: #2196F3; /* Primary Color */
        }

        .alert-danger {
            background-color: #FFEBEE;
            color: #F44336;
        }

        .form-control:focus {
            border-color: #2196F3; /* Primary Color */
            box-shadow: 0 0 0 0.25rem rgba(33, 150, 243, 0.25);
        }

        .d-flex {
            display: flex;
            gap: 20px;
            flex-wrap: wrap; /* Allows wrapping on smaller screens */
        }

    </style>
</head>
<body>

    <div class="container register-container">
        <div class="register-card shadow-lg">
            <h2 class="text-center mb-3">Sign Up</h2>
            <p class="text-center text-muted">Create an account to get started</p>
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })


            <!-- Google Register Button -->
            <!-- Google Register Button -->
            <a href="@Url.Action("LoginWithGoogle", "Account")" class="btn btn-google w-100 mb-3">
                <i class="fab fa-google"></i> Register with Google
            </a>

            <hr>

            @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
            {
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    @Html.LabelFor(model => model.Name, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = "Enter your full name", required = "required" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                @* <div class="mb-3">
                    @Html.LabelFor(model => model.MonthlyIncome, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.MonthlyIncome, new { @class = "form-control", placeholder = "Enter your Monthly Income", required = "required" })
                    @Html.ValidationMessageFor(model => model.MonthlyIncome, "", new { @class = "text-danger" })
                </div> *@
                <div class="mb-3">
                    @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                    @Html.TextBoxFor(model => model.Email, new
                        {
                            @class = "form-control",
                            type = "email",
                            placeholder = "Enter your email",
                            required = "required",
                            pattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(com|org|net|edu|gov|mil|int|info|biz)$",
                            title = "Enter a valid email address"
                        })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Password, new { @class = "form-label" })
                    @Html.PasswordFor(model => model.Password, new
                        {
                            @class = "form-control",
                            placeholder = "Enter a strong password",
                            required = "required",
                            pattern = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%&*])[A-Za-z\\d!@#$%&*]{8,}$",
                            title = "Must contain at least 8 characters, 1 uppercase, 1 lowercase, 1 number, and 1 special character."
                        })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.ConfirmPassword, new { @class = "form-label" })
                    @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm your password", required = "required" })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>

                <button type="submit" class="btn btn-primary w-100">Register</button>
            }

            <p class="text-center mt-3">
                Already have an account? @Html.ActionLink("Login here", "Login", "Account")
            </p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>
